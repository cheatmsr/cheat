#include <stdio.h>
#include <stdlib.h>
#include <sys/types.h>
#include <sys/stat.h>
#include <dirent.h>
#include <unistd.h>
#include <pwd.h>
#include <grp.h>
#include <time.h>

void print_permissions(struct stat fileStat) {
    printf((S_ISDIR(fileStat.st_mode)) ? "d" : "-");
    printf((fileStat.st_mode & S_IRUSR) ? "r" : "-");
    printf((fileStat.st_mode & S_IWUSR) ? "w" : "-");
    printf((fileStat.st_mode & S_IXUSR) ? "x" : "-");
    printf((fileStat.st_mode & S_IRGRP) ? "r" : "-");
    printf((fileStat.st_mode & S_IWGRP) ? "w" : "-");
    printf((fileStat.st_mode & S_IXGRP) ? "x" : "-");
    printf((fileStat.st_mode & S_IROTH) ? "r" : "-");
    printf((fileStat.st_mode & S_IWOTH) ? "w" : "-");
    printf((fileStat.st_mode & S_IXOTH) ? "x" : "-");
}

void list_directory(const char *dirpath) {
    DIR *dir = opendir(dirpath);
    struct dirent *entry;
    struct stat fileStat;
    char fullpath[1024];

    if (dir == NULL) {
        perror("opendir");
        exit(EXIT_FAILURE);
    }

    while ((entry = readdir(dir)) != NULL) {
        snprintf(fullpath, sizeof(fullpath), "%s/%s", dirpath, entry->d_name);
        if (stat(fullpath, &fileStat) == -1) {
            perror("stat");
            continue;
        }

        printf("%ld ", (long)fileStat.st_ino);
        print_permissions(fileStat);
        printf(" %ld ", (long)fileStat.st_nlink);
        printf("%s %s ", getpwuid(fileStat.st_uid)->pw_name, getgrgid(fileStat.st_gid)->gr_name);
        printf("%5ld ", (long)fileStat.st_size);

        char timebuf[80];
        struct tm *timeinfo = localtime(&fileStat.st_mtime);
        strftime(timebuf, sizeof(timebuf), "%b %d %H:%M", timeinfo);
        printf("%s ", timebuf);
        printf("%s\n", entry->d_name);
    }

    closedir(dir);
}

int main(int argc, char *argv[]) {
    const char *dirpath = (argc > 1) ? argv[1] : ".";
    list_directory(dirpath);
    return 0;
}




b

#include <stdio.h>
#include <stdlib.h>
#include <dirent.h>
#include <sys/stat.h>
#include <unistd.h>

void removeEmptyFiles(const char *path) {
    DIR *dir = opendir(path);
    struct dirent *entry;
    struct stat fileStat;
    char filePath[1024];

    if (!dir) {
        perror("Error opening directory");
        exit(EXIT_FAILURE);
    }

    while ((entry = readdir(dir)) != NULL) {
        snprintf(filePath, sizeof(filePath), "%s/%s", path, entry->d_name);
        if (stat(filePath, &fileStat) < 0) {
            perror("Error getting file status");
            exit(EXIT_FAILURE);
        }

        if (S_ISREG(fileStat.st_mode) && fileStat.st_size == 0) {
            if (unlink(filePath) == 0) {
                printf("Removed empty file: %s\n", entry->d_name);
            } else {
                perror("Error removing file");
            }
        }
    }

    closedir(dir);
}

int main(int argc, char *argv[]) {
    if (argc != 2) {
        fprintf(stderr, "Usage: %s <directory>\n", argv[0]);
        exit(EXIT_FAILURE);
    }

    removeEmptyFiles(argv[1]);
    return 0;
}
