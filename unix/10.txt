#include <stdio.h>
#include <stdlib.h>
#include <unistd.h>
#include <string.h>

#define BUFFER_SIZE 256

int main() {
    int pipe1[2], pipe2[2];
    pid_t pid;

    if (pipe(pipe1) == -1 || pipe(pipe2) == -1) {
        perror("Pipe creation failed");
        exit(EXIT_FAILURE);
    }

    pid = fork();
    if (pid < 0) {
        perror("Fork failed");
        exit(EXIT_FAILURE);
    }

    if (pid > 0) { // Parent process
        close(pipe1[0]);
        close(pipe2[1]);

        char input[BUFFER_SIZE];
        printf("Enter a string: ");
        fgets(input, BUFFER_SIZE, stdin);
        input[strcspn(input, "\n")] = 0;

        write(pipe1[1], input, strlen(input) + 1);

        char output[BUFFER_SIZE];
        read(pipe2[0], output, BUFFER_SIZE);
        printf("Concatenated String from P2: %s\n", output);

        close(pipe1[1]);
        close(pipe2[0]);
    } else { // Child process
        close(pipe1[1]);
        close(pipe2[0]);

        char received[BUFFER_SIZE];
        read(pipe1[0], received, BUFFER_SIZE);

        const char *concat_str = " - Processed by P2";
        char result[BUFFER_SIZE];

        int i = 0, j = 0;
        while (received[i] != '\0') result[i++] = received[i++];
        while (concat_str[j] != '\0') result[i++] = concat_str[j++];
        result[i] = '\0';

        write(pipe2[1], result, strlen(result) + 1);

        close(pipe1[0]);
        close(pipe2[1]);
        exit(0);
    }

    return 0;
}




b
#include <stdio.h>
#include <stdlib.h>
#include <fcntl.h>
#include <unistd.h>
#include <string.h>

#define BUFFER_SIZE 1024

void grep_pattern(const char *filename, const char *pattern) {
    int fd = open(filename, O_RDONLY);
    if (fd < 0) {
        perror("Error opening file");
        exit(EXIT_FAILURE);
    }

    char buffer[BUFFER_SIZE + 1], line[2 * BUFFER_SIZE];
    ssize_t bytesRead;
    size_t lineLen = 0;

    while ((bytesRead = read(fd, buffer, BUFFER_SIZE)) > 0) {
        buffer[bytesRead] = '\0';
        char *start = buffer, *newline;

        while ((newline = strchr(start, '\n')) != NULL) {
            size_t len = newline - start + 1;
            if (lineLen + len >= sizeof(line)) {
                fprintf(stderr, "Line too long\n");
                close(fd);
                exit(EXIT_FAILURE);
            }
            strncpy(line + lineLen, start, len);
            lineLen += len;
            line[lineLen] = '\0';

            if (strstr(line, pattern)) printf("%s", line);

            lineLen = 0;
            start = newline + 1;
        }

        size_t remaining = strlen(start);
        if (remaining > 0) {
            if (remaining >= sizeof(line)) {
                fprintf(stderr, "Line too long\n");
                close(fd);
                exit(EXIT_FAILURE);
            }
            memmove(line, start, remaining);
            lineLen = remaining;
        }
    }

    if (lineLen > 0) {
        line[lineLen] = '\0';
        if (strstr(line, pattern)) printf("%s\n", line);
    }

    if (bytesRead < 0) perror("Error reading file");
    close(fd);
}

int main(int argc, char *argv[]) {
    if (argc != 3) {
        fprintf(stderr, "Usage: %s <pattern> <filename>\n", argv[0]);
        exit(EXIT_FAILURE);
    }

    grep_pattern(argv[2], argv[1]);
    return 0;
}
